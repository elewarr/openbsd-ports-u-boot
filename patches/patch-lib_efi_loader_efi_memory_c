$OpenBSD: patch-lib_efi_loader_efi_memory_c,v 1.3 2019/04/09 22:32:48 patrick Exp $

efi_allocate_pages() expects a (uint64_t *) pointer to pass the
address of the assigned memory. If we pass the address of a pointer
here, an illegal memory access occurs on 32bit systems.  This patch
will be part of U-Boot 2019.04.

Index: lib/efi_loader/efi_memory.c
--- lib/efi_loader/efi_memory.c.orig
+++ lib/efi_loader/efi_memory.c
@@ -440,6 +440,7 @@ efi_status_t efi_free_pages(uint64_t memory, efi_uintn
 efi_status_t efi_allocate_pool(int pool_type, efi_uintn_t size, void **buffer)
 {
 	efi_status_t r;
+	u64 addr;
 	struct efi_pool_allocation *alloc;
 	u64 num_pages = efi_size_in_pages(size +
 					  sizeof(struct efi_pool_allocation));
@@ -453,9 +454,9 @@ efi_status_t efi_allocate_pool(int pool_type, efi_uint
 	}
 
 	r = efi_allocate_pages(EFI_ALLOCATE_ANY_PAGES, pool_type, num_pages,
-			       (uint64_t *)&alloc);
-
+			       &addr);
 	if (r == EFI_SUCCESS) {
+		alloc = (struct efi_pool_allocation *)(uintptr_t)addr;
 		alloc->num_pages = num_pages;
 		*buffer = alloc->data;
 	}
